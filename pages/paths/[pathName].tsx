import { GetStaticPaths, GetStaticProps, GetStaticPropsContext, InferGetStaticPropsType } from 'next'
import { ParsedUrlQuery } from 'querystring'
import Head from 'next/head'
import styles from '../../styles/Home.module.css'
import { paths, populatePath, PopulatedPath } from '../../data'
import { Timeline } from '../../src/shared'

interface Params extends ParsedUrlQuery {
    pathName: string
}

interface StaticProps {
    path: PopulatedPath
}

export const getStaticPaths: GetStaticPaths = async () => {
    const staticPaths = Object.keys(paths).map((pathName) => ({
        params: { pathName }
    }))

    return { paths: staticPaths, fallback: false }
}

export const getStaticProps: GetStaticProps<StaticProps, Params> = async ({ params }) => {
  const path = paths[params!.pathName]
  const populatedPath = populatePath(path)

  return {
    props: {
      path: populatedPath,
    }
  }
}

type Props = InferGetStaticPropsType<typeof getStaticProps>

export default function Home({ path }: Props) {
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          {path.title}
        </h1>

        <div style={{ padding: '0 1rem' }}>
          <Timeline>
            {Object.values(path.resources).map((resource, index) => 
              <Timeline.Item key={resource.url} active={index < 3}>
                  <span style={{ color: '#BDBDBD', fontSize: '0.8rem' }}>{resource.source}</span>
                  <br />
                  <a style={{ display: 'inline-block', padding: '0 0 0.25rem 0' }} href={resource.url} target="_blank" rel="noreferrer">{resource.title}</a>
                  <br />
                  <span style={{ color: '#9B51E0' }}>&Theta; &AElig;</span>
              </Timeline.Item>)}
          </Timeline>
        </div>
      </main>

    </div>
  )
}
